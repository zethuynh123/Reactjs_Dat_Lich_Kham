{
    "sourceFile": "src/axios.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1696071501845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1696071594869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,63 +1,65 @@\n-import axios from \"axios\";\r\n-import _ from \"lodash\";\r\n+import axios from 'axios';\r\n+import _ from 'lodash';\r\n+import config from './config';\r\n \r\n const instance = axios.create({\r\n-  baseURL: process.env.REACT_APP_BACKEND_URL,\r\n-  // withCredentials: true\r\n+    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n+    withCredentials: true\r\n });\r\n \r\n-// const createError = (httpStatusCode, statusCode, errorMessage, problems, errorCode = '') => {\r\n-//     const error = new Error();\r\n-//     error.httpStatusCode = httpStatusCode;\r\n-//     error.statusCode = statusCode;\r\n-//     error.errorMessage = errorMessage;\r\n-//     error.problems = problems;\r\n-//     error.errorCode = errorCode + \"\";\r\n-//     return error;\r\n-// };\r\n+const createError = (httpStatusCode, statusCode, errorMessage, problems, errorCode = '') => {\r\n+    const error = new Error();\r\n+    error.httpStatusCode = httpStatusCode;\r\n+    error.statusCode = statusCode;\r\n+    error.errorMessage = errorMessage;\r\n+    error.problems = problems;\r\n+    error.errorCode = errorCode + \"\";\r\n+    return error;\r\n+};\r\n \r\n-// export const isSuccessStatusCode = (s) => {\r\n-//     // May be string or number\r\n-//     const statusType = typeof s;\r\n-//     return (statusType === 'number' && s === 0) || (statusType === 'string' && s.toUpperCase() === 'OK');\r\n-// };\r\n+export const isSuccessStatusCode = (s) => {\r\n+    // May be string or number\r\n+    const statusType = typeof s;\r\n+    return (statusType === 'number' && s === 0) || (statusType === 'string' && s.toUpperCase() === 'OK');\r\n+};\r\n \r\n-// instance.interceptors.response.use(\r\n-//     (response) => {\r\n-//         // Thrown error for request with OK status code\r\n-//         const { data } = response;\r\n-//         if (data.hasOwnProperty('s') && !isSuccessStatusCode(data['s']) && data.hasOwnProperty('errmsg')) {\r\n-//             return Promise.reject(createError(response.status, data['s'], data['errmsg'], null, data['errcode'] ? data['errcode'] : \"\"));\r\n-//         }\r\n+instance.interceptors.response.use(\r\n+    (response) => {\r\n+        // Thrown error for request with OK status code\r\n+        const { data } = response;\r\n+        if (data.hasOwnProperty('s') && !isSuccessStatusCode(data['s']) && data.hasOwnProperty('errmsg')) {\r\n+            return Promise.reject(createError(response.status, data['s'], data['errmsg'], null, data['errcode'] ? data['errcode'] : \"\"));\r\n+        }\r\n \r\n-//         // Return direct data to callback\r\n-//         if (data.hasOwnProperty('s') && data.hasOwnProperty('d')) {\r\n-//             return data['d'];\r\n-//         }\r\n-//         // Handle special case\r\n-//         if (data.hasOwnProperty('s') && _.keys(data).length === 1) {\r\n-//             return null;\r\n-//         }\r\n-//         return response.data;\r\n-//     },\r\n-//     (error) => {\r\n-//         const { response } = error;\r\n-//         if (response == null) {\r\n-//             return Promise.reject(error);\r\n-//         }\r\n+        // Return direct data to callback\r\n+        if (data.hasOwnProperty('s') && data.hasOwnProperty('d')) {\r\n+            return data['d'];\r\n+        }\r\n+        // Handle special case\r\n+        if (data.hasOwnProperty('s') && _.keys(data).length === 1) {\r\n+            return null;\r\n+        }\r\n+        return response.data;\r\n+    },\r\n+    (error) => {\r\n+        const { response } = error;\r\n+        console.log('config axios',response);\r\n+        if (response == null) {\r\n+            return Promise.reject(error);\r\n+        }\r\n \r\n-//         const { data } = response;\r\n+        const { data } = response;\r\n \r\n-//         if (data.hasOwnProperty('s') && data.hasOwnProperty('errmsg')) {\r\n-//             return Promise.reject(createError(response.status, data['s'], data['errmsg']));\r\n-//         }\r\n+        if (data.hasOwnProperty('s') && data.hasOwnProperty('errmsg')) {\r\n+            return Promise.reject(createError(response.status, data['s'], data['errmsg']));\r\n+        }\r\n \r\n-//         if (data.hasOwnProperty('code') && data.hasOwnProperty('message')) {\r\n-//             return Promise.reject(createError(response.status, data['code'], data['message'], data['problems']));\r\n-//         }\r\n+        if (data.hasOwnProperty('code') && data.hasOwnProperty('message')) {\r\n+            return Promise.reject(createError(response.status, data['code'], data['message'], data['problems']));\r\n+        }\r\n \r\n-//         return Promise.reject(createError(response.status));\r\n-//     }\r\n-// );\r\n+        return Promise.reject(createError(response.status));\r\n+    }\r\n+);\r\n \r\n export default instance;\r\n"
                },
                {
                    "date": 1696071971713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,95 +1,64 @@\n-import axios from \"axios\";\r\n-import _ from \"lodash\";\r\n-import config from \"./config\";\r\n+import axios from 'axios';\r\n+import _ from 'lodash';\r\n+import config from './config';\r\n \r\n const instance = axios.create({\r\n-  baseURL: process.env.REACT_APP_BACKEND_URL,\r\n-  withCredentials: true,\r\n+    baseURL: process.env.REACT_APP_BACKEND_URL,\r\n+    // withCredentials: true\r\n });\r\n \r\n-const createError = (\r\n-  httpStatusCode,\r\n-  statusCode,\r\n-  errorMessage,\r\n-  problems,\r\n-  errorCode = \"\"\r\n-) => {\r\n-  const error = new Error();\r\n-  error.httpStatusCode = httpStatusCode;\r\n-  error.statusCode = statusCode;\r\n-  error.errorMessage = errorMessage;\r\n-  error.problems = problems;\r\n-  error.errorCode = errorCode + \"\";\r\n-  return error;\r\n-};\r\n+// const createError = (httpStatusCode, statusCode, errorMessage, problems, errorCode = '') => {\r\n+//     const error = new Error();\r\n+//     error.httpStatusCode = httpStatusCode;\r\n+//     error.statusCode = statusCode;\r\n+//     error.errorMessage = errorMessage;\r\n+//     error.problems = problems;\r\n+//     error.errorCode = errorCode + \"\";\r\n+//     return error;\r\n+// };\r\n \r\n-export const isSuccessStatusCode = (s) => {\r\n-  // May be string or number\r\n-  const statusType = typeof s;\r\n-  return (\r\n-    (statusType === \"number\" && s === 0) ||\r\n-    (statusType === \"string\" && s.toUpperCase() === \"OK\")\r\n-  );\r\n-};\r\n+// export const isSuccessStatusCode = (s) => {\r\n+//     // May be string or number\r\n+//     const statusType = typeof s;\r\n+//     return (statusType === 'number' && s === 0) || (statusType === 'string' && s.toUpperCase() === 'OK');\r\n+// };\r\n \r\n-instance.interceptors.response.use(\r\n-  (response) => {\r\n-    // Thrown error for request with OK status code\r\n-    const { data } = response;\r\n-    if (\r\n-      data.hasOwnProperty(\"s\") &&\r\n-      !isSuccessStatusCode(data[\"s\"]) &&\r\n-      data.hasOwnProperty(\"errmsg\")\r\n-    ) {\r\n-      return Promise.reject(\r\n-        createError(\r\n-          response.status,\r\n-          data[\"s\"],\r\n-          data[\"errmsg\"],\r\n-          null,\r\n-          data[\"errcode\"] ? data[\"errcode\"] : \"\"\r\n-        )\r\n-      );\r\n-    }\r\n+// instance.interceptors.response.use(\r\n+//     (response) => {\r\n+//         // Thrown error for request with OK status code\r\n+//         const { data } = response;\r\n+//         if (data.hasOwnProperty('s') && !isSuccessStatusCode(data['s']) && data.hasOwnProperty('errmsg')) {\r\n+//             return Promise.reject(createError(response.status, data['s'], data['errmsg'], null, data['errcode'] ? data['errcode'] : \"\"));\r\n+//         }\r\n \r\n-    // Return direct data to callback\r\n-    if (data.hasOwnProperty(\"s\") && data.hasOwnProperty(\"d\")) {\r\n-      return data[\"d\"];\r\n-    }\r\n-    // Handle special case\r\n-    if (data.hasOwnProperty(\"s\") && _.keys(data).length === 1) {\r\n-      return null;\r\n-    }\r\n-    return response.data;\r\n-  },\r\n-  (error) => {\r\n-    const { response } = error;\r\n-    console.log(\"config axios\", response);\r\n-    if (response == null) {\r\n-      return Promise.reject(error);\r\n-    }\r\n+//         // Return direct data to callback\r\n+//         if (data.hasOwnProperty('s') && data.hasOwnProperty('d')) {\r\n+//             return data['d'];\r\n+//         }\r\n+//         // Handle special case\r\n+//         if (data.hasOwnProperty('s') && _.keys(data).length === 1) {\r\n+//             return null;\r\n+//         }\r\n+//         return response.data;\r\n+//     },\r\n+//     (error) => {\r\n+//         const { response } = error;\r\n+//         if (response == null) {\r\n+//             return Promise.reject(error);\r\n+//         }\r\n \r\n-    const { data } = response;\r\n+//         const { data } = response;\r\n \r\n-    if (data.hasOwnProperty(\"s\") && data.hasOwnProperty(\"errmsg\")) {\r\n-      return Promise.reject(\r\n-        createError(response.status, data[\"s\"], data[\"errmsg\"])\r\n-      );\r\n-    }\r\n+//         if (data.hasOwnProperty('s') && data.hasOwnProperty('errmsg')) {\r\n+//             return Promise.reject(createError(response.status, data['s'], data['errmsg']));\r\n+//         }\r\n \r\n-    if (data.hasOwnProperty(\"code\") && data.hasOwnProperty(\"message\")) {\r\n-      return Promise.reject(\r\n-        createError(\r\n-          response.status,\r\n-          data[\"code\"],\r\n-          data[\"message\"],\r\n-          data[\"problems\"]\r\n-        )\r\n-      );\r\n-    }\r\n+//         if (data.hasOwnProperty('code') && data.hasOwnProperty('message')) {\r\n+//             return Promise.reject(createError(response.status, data['code'], data['message'], data['problems']));\r\n+//         }\r\n \r\n-    return Promise.reject(createError(response.status));\r\n-  }\r\n-);\r\n+//         return Promise.reject(createError(response.status));\r\n+//     }\r\n+// );\r\n \r\n export default instance;\r\n"
                }
            ],
            "date": 1696071501845,
            "name": "Commit-0",
            "content": "import axios from \"axios\";\r\nimport _ from \"lodash\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: process.env.REACT_APP_BACKEND_URL,\r\n  // withCredentials: true\r\n});\r\n\r\n// const createError = (httpStatusCode, statusCode, errorMessage, problems, errorCode = '') => {\r\n//     const error = new Error();\r\n//     error.httpStatusCode = httpStatusCode;\r\n//     error.statusCode = statusCode;\r\n//     error.errorMessage = errorMessage;\r\n//     error.problems = problems;\r\n//     error.errorCode = errorCode + \"\";\r\n//     return error;\r\n// };\r\n\r\n// export const isSuccessStatusCode = (s) => {\r\n//     // May be string or number\r\n//     const statusType = typeof s;\r\n//     return (statusType === 'number' && s === 0) || (statusType === 'string' && s.toUpperCase() === 'OK');\r\n// };\r\n\r\n// instance.interceptors.response.use(\r\n//     (response) => {\r\n//         // Thrown error for request with OK status code\r\n//         const { data } = response;\r\n//         if (data.hasOwnProperty('s') && !isSuccessStatusCode(data['s']) && data.hasOwnProperty('errmsg')) {\r\n//             return Promise.reject(createError(response.status, data['s'], data['errmsg'], null, data['errcode'] ? data['errcode'] : \"\"));\r\n//         }\r\n\r\n//         // Return direct data to callback\r\n//         if (data.hasOwnProperty('s') && data.hasOwnProperty('d')) {\r\n//             return data['d'];\r\n//         }\r\n//         // Handle special case\r\n//         if (data.hasOwnProperty('s') && _.keys(data).length === 1) {\r\n//             return null;\r\n//         }\r\n//         return response.data;\r\n//     },\r\n//     (error) => {\r\n//         const { response } = error;\r\n//         if (response == null) {\r\n//             return Promise.reject(error);\r\n//         }\r\n\r\n//         const { data } = response;\r\n\r\n//         if (data.hasOwnProperty('s') && data.hasOwnProperty('errmsg')) {\r\n//             return Promise.reject(createError(response.status, data['s'], data['errmsg']));\r\n//         }\r\n\r\n//         if (data.hasOwnProperty('code') && data.hasOwnProperty('message')) {\r\n//             return Promise.reject(createError(response.status, data['code'], data['message'], data['problems']));\r\n//         }\r\n\r\n//         return Promise.reject(createError(response.status));\r\n//     }\r\n// );\r\n\r\nexport default instance;\r\n"
        }
    ]
}